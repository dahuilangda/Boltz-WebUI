# /data/boltz_webui/lead_optimization/html_reporter.py

"""
html_reporter.py

Lead optimization结果的HTML报告生成器，类似virtual_screening的报告功能
"""

import os
import json
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
import base64

logger = logging.getLogger(__name__)

class OptimizationHTMLReporter:
    """Lead optimization HTML报告生成器"""
    
    def __init__(self, analyzer, output_dir: str):
        self.analyzer = analyzer
        self.output_dir = output_dir
        self.plots_dir = os.path.join(output_dir, "plots")
        
        # 确保目录存在
        os.makedirs(self.plots_dir, exist_ok=True)
        
        logger.info("HTML报告生成器初始化完成")
    
    def generate_html_report(self, plots: List[Dict[str, str]] = None) -> str:
        """生成完整的HTML报告"""
        try:
            # 如果没有提供plots，尝试生成
            if plots is None:
                plots = self.analyzer.generate_optimization_plots()
            
            # 获取分析摘要
            summary = self.analyzer.get_analysis_summary()
            
            # 生成HTML内容
            html_content = self._generate_html_template(summary, plots)
            
            # 保存HTML文件
            report_path = os.path.join(self.output_dir, "optimization_report.html")
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            logger.info(f"HTML报告已生成: {report_path}")
            return report_path
            
        except Exception as e:
            logger.error(f"生成HTML报告失败: {e}")
            return None
    
    def _generate_html_template(self, summary: Dict[str, Any], plots: List[Dict[str, str]]) -> str:
        """生成HTML模板"""
        
        # 基础HTML模板
        html_template = f"""
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lead Optimization Report - {summary.get('original_compound', 'Unknown')}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Lead Optimization Report</h1>
            <div class="report-info">
                <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>Original Compound:</strong> {summary.get('original_compound', 'N/A')}</p>
                <p><strong>Strategy:</strong> {summary.get('optimization_strategy', 'N/A').title()}</p>
            </div>
        </header>

        <nav class="nav-menu">
            <a href="#summary">Summary</a>
            <a href="#candidates">Top Candidates</a>
            <a href="#analysis">Analysis</a>
            <a href="#properties">Properties</a>
        </nav>

        <main>
            {self._generate_summary_section(summary)}
            {self._generate_candidates_section()}
            {self._generate_analysis_section(plots)}
            {self._generate_properties_section()}
        </main>

        <footer>
            <p>Report generated by Boltz-WebUI Lead Optimization Module</p>
        </footer>
    </div>

    <script>
        {self._get_javascript()}
    </script>
</body>
</html>
"""
        return html_template
    
    def _get_css_styles(self) -> str:
        """获取CSS样式"""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f8f9fa;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        header h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }

        .report-info {
            display: flex;
            gap: 2rem;
            flex-wrap: wrap;
        }

        .nav-menu {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .nav-menu a {
            color: #667eea;
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .nav-menu a:hover {
            background-color: #667eea;
            color: white;
        }

        .section {
            background: white;
            padding: 2rem;
            margin-bottom: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .section h2 {
            color: #667eea;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e9ecef;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .metric-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #667eea;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }

        .metric-label {
            color: #6c757d;
            margin-top: 0.5rem;
        }

        .candidates-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .candidates-table th,
        .candidates-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }

        .candidates-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }

        .candidates-table tr:hover {
            background-color: #f8f9fa;
        }

        .score-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            color: white;
            font-weight: bold;
            text-align: center;
        }

        .score-high { background-color: #28a745; }
        .score-medium { background-color: #ffc107; color: #212529; }
        .score-low { background-color: #dc3545; }

        .plot-container {
            margin: 2rem 0;
            text-align: center;
        }

        .plot-container img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .plot-description {
            margin-top: 1rem;
            color: #6c757d;
            font-style: italic;
        }

        .properties-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .property-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #28a745;
        }

        .property-card h4 {
            color: #495057;
            margin-bottom: 0.5rem;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 0.5rem 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.5s ease;
        }

        footer {
            text-align: center;
            padding: 2rem;
            color: #6c757d;
            border-top: 1px solid #dee2e6;
            margin-top: 2rem;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            header h1 {
                font-size: 2rem;
            }
            
            .report-info {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .metrics-grid {
                grid-template-columns: 1fr;
            }
        }
        """
    
    def _generate_summary_section(self, summary: Dict[str, Any]) -> str:
        """生成摘要部分"""
        execution_time_str = f"{summary.get('execution_time_minutes', 0):.1f} minutes"
        
        return f"""
        <section id="summary" class="section">
            <h2>Optimization Summary</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">{summary.get('total_candidates', 0)}</div>
                    <div class="metric-label">Total Candidates</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{summary.get('top_score', 0):.3f}</div>
                    <div class="metric-label">Best Score</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{summary.get('average_score', 0):.3f}</div>
                    <div class="metric-label">Average Score</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{execution_time_str}</div>
                    <div class="metric-label">Execution Time</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{summary.get('high_confidence_count', 0)}</div>
                    <div class="metric-label">High Confidence</div>
                </div>
            </div>
            
            <div class="statistics-details">
                <h3>Generation Statistics</h3>
                {self._format_statistics(summary.get('statistics', {}))}
            </div>
        </section>
        """
    
    def _generate_candidates_section(self) -> str:
        """生成候选化合物部分"""
        # 获取top 10候选化合物
        top_candidates = self.analyzer.df.head(10)
        
        rows = []
        for _, candidate in top_candidates.iterrows():
            score = candidate['combined_score']
            score_class = self._get_score_class(score)
            
            confidence = candidate.get('confidence_score', 0)
            confidence_str = f"{confidence:.3f}" if confidence > 0 else "N/A"
            
            rows.append(f"""
                <tr>
                    <td>#{candidate['rank']}</td>
                    <td><code>{candidate['smiles']}</code></td>
                    <td><span class="score-badge {score_class}">{score:.3f}</span></td>
                    <td>{confidence_str}</td>
                    <td>{candidate.get('molecular_weight', 'N/A')}</td>
                    <td>{candidate.get('logp', 'N/A')}</td>
                    <td>{candidate.get('generation_method', 'N/A')}</td>
                </tr>
            """)
        
        return f"""
        <section id="candidates" class="section">
            <h2>Top Candidates</h2>
            <table class="candidates-table">
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>SMILES</th>
                        <th>Score</th>
                        <th>Confidence</th>
                        <th>MW</th>
                        <th>LogP</th>
                        <th>Method</th>
                    </tr>
                </thead>
                <tbody>
                    {''.join(rows)}
                </tbody>
            </table>
        </section>
        """
    
    def _generate_analysis_section(self, plots: List[Dict[str, str]]) -> str:
        """生成分析图表部分"""
        plot_html = []
        
        for plot in plots:
            # 将图片转换为base64编码以嵌入HTML
            plot_path = plot['path']
            if os.path.exists(plot_path):
                try:
                    with open(plot_path, 'rb') as img_file:
                        img_data = img_file.read()
                        img_base64 = base64.b64encode(img_data).decode('utf-8')
                    
                    plot_html.append(f"""
                        <div class="plot-container">
                            <h3>{plot['title']}</h3>
                            <img src="data:image/png;base64,{img_base64}" alt="{plot['title']}">
                            <div class="plot-description">{plot['description']}</div>
                        </div>
                    """)
                except Exception as e:
                    logger.warning(f"无法加载图片 {plot_path}: {e}")
                    plot_html.append(f"""
                        <div class="plot-container">
                            <h3>{plot['title']}</h3>
                            <p>图表加载失败: {plot['filename']}</p>
                        </div>
                    """)
        
        return f"""
        <section id="analysis" class="section">
            <h2>Analysis & Visualizations</h2>
            {''.join(plot_html)}
        </section>
        """
    
    def _generate_properties_section(self) -> str:
        """生成属性分析部分"""
        # 计算属性统计
        property_stats = {}
        if 'molecular_weight' in self.analyzer.df.columns:
            mw_values = self.analyzer.df['molecular_weight'].values
            property_stats['Molecular Weight'] = {
                'mean': float(mw_values.mean()),
                'range': f"{float(mw_values.min()):.1f} - {float(mw_values.max()):.1f}",
                'lipinski_compliance': len(mw_values[mw_values <= 500]) / len(mw_values) * 100
            }
        
        if 'logp' in self.analyzer.df.columns:
            logp_values = self.analyzer.df['logp'].values
            property_stats['LogP'] = {
                'mean': float(logp_values.mean()),
                'range': f"{float(logp_values.min()):.1f} - {float(logp_values.max()):.1f}",
                'lipinski_compliance': len(logp_values[logp_values <= 5]) / len(logp_values) * 100
            }
        
        property_cards = []
        for prop_name, stats in property_stats.items():
            compliance = stats.get('lipinski_compliance', 0)
            property_cards.append(f"""
                <div class="property-card">
                    <h4>{prop_name}</h4>
                    <p><strong>Mean:</strong> {stats['mean']:.2f}</p>
                    <p><strong>Range:</strong> {stats['range']}</p>
                    <p><strong>Lipinski Compliance:</strong> {compliance:.1f}%</p>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {compliance}%"></div>
                    </div>
                </div>
            """)
        
        return f"""
        <section id="properties" class="section">
            <h2>Molecular Properties Analysis</h2>
            <div class="properties-grid">
                {''.join(property_cards)}
            </div>
        </section>
        """
    
    def _format_statistics(self, statistics: Dict[str, Any]) -> str:
        """格式化统计信息"""
        if not statistics:
            return "<p>No statistics available</p>"
        
        stats_html = "<ul>"
        for key, value in statistics.items():
            if isinstance(value, dict):
                stats_html += f"<li><strong>{key.replace('_', ' ').title()}:</strong>"
                stats_html += "<ul>"
                for subkey, subvalue in value.items():
                    stats_html += f"<li>{subkey}: {subvalue}</li>"
                stats_html += "</ul></li>"
            else:
                stats_html += f"<li><strong>{key.replace('_', ' ').title()}:</strong> {value}</li>"
        stats_html += "</ul>"
        
        return stats_html
    
    def _get_score_class(self, score: float) -> str:
        """根据分数获取CSS类"""
        if score >= 0.7:
            return "score-high"
        elif score >= 0.5:
            return "score-medium"
        else:
            return "score-low"
    
    def _get_javascript(self) -> str:
        """获取JavaScript代码"""
        return """
        // 平滑滚动
        document.querySelectorAll('.nav-menu a').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // 进度条动画
        window.addEventListener('load', function() {
            const progressBars = document.querySelectorAll('.progress-fill');
            progressBars.forEach(bar => {
                const width = bar.style.width;
                bar.style.width = '0';
                setTimeout(() => {
                    bar.style.width = width;
                }, 100);
            });
        });

        // 表格行点击高亮
        document.querySelectorAll('.candidates-table tbody tr').forEach(row => {
            row.addEventListener('click', function() {
                document.querySelectorAll('.candidates-table tbody tr').forEach(r => {
                    r.style.backgroundColor = '';
                });
                this.style.backgroundColor = '#e3f2fd';
            });
        });
        """
